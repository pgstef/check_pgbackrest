---
- name: Deploy cluster
  hosts: all
  any_errors_fatal: true
  tasks:
    - name: Require cluster directory to be specified
      assert:
        msg: "No cluster directory specified"
        that:
          - cluster_dir is defined and cluster_dir != ''
      run_once: true

    - name: Check EDB repository credentials
      assert:
        msg: "Missing credentials"
        that:
          - lookup('env', 'EDB_REPO_USERNAME') != ''
          - lookup('env', 'EDB_REPO_PASSWORD') != ''
      run_once: true

    # Install PGDG and EDB repositories
    - include_role:
        name: edb_devops.edb_postgres.setup_repo
      vars:
        pg_type: "PG"
        repo_username: "{{ lookup('env', 'EDB_REPO_USERNAME') }}"
        repo_password: "{{ lookup('env', 'EDB_REPO_PASSWORD') }}"
      when: "'icinga2' not in group_names"

    - include_role:
        name: edb_devops.edb_postgres.setup_repo
      vars:
        pg_type: "EPAS"
        repo_username: "{{ lookup('env', 'EDB_REPO_USERNAME') }}"
        repo_password: "{{ lookup('env', 'EDB_REPO_PASSWORD') }}"
      when: "'icinga2' not in group_names"

    # Install db server and setup replication
    - include_role:
        name: edb_devops.edb_postgres.install_dbserver
      when: "'primary' in group_names or 'standby' in group_names"
    
    - include_role:
        name: edb_devops.edb_postgres.init_dbserver
      vars:
        use_replication_slots: false
        use_hostname: false
      when: "'primary' in group_names"

    - include_role:
        name: edb_devops.edb_postgres.setup_replication
      vars:
        use_replication_slots: false
        use_hostname: false
      when: "'standby' in group_names"

    # Install pgBackRest and check_pgbackrest
    - include_role:
        name: setup_pgbackrest
      when: >
        'pgbackrest_repo_host' in group_names or
        (hostvars[inventory_hostname].pgbackrest is defined and hostvars[inventory_hostname].pgbackrest == true)

    - include_role:
        name: setup_check_pgbackrest
      when: >
        'pgbackrest_repo_host' in group_names or
        (hostvars[inventory_hostname].pgbackrest is defined and hostvars[inventory_hostname].pgbackrest == true) or
        'icinga2' in group_names

    # Save facts locally for other playbooks
    - name: Ensure local facts directory exists
      file: state=directory path="/etc/ansible/facts.d"

    - name: Save local facts
      template:
        src: "profile.fact.j2"
        dest: "/etc/ansible/facts.d/profile.fact"
      when: >
        'primary' in group_names and
        (hostvars[inventory_hostname].pgbackrest is defined and hostvars[inventory_hostname].pgbackrest == true)