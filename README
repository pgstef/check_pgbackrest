NAME
    check_pgbackrest - pgBackRest backup check plugin for Nagios

SYNOPSIS
      check_pgbackrest [-s|--service SERVICE] [-S|--stanza NAME]
      check_pgbackrest [-l|--list]
      check_pgbackrest [--help]

DESCRIPTION
    check_pgbackrest is designed to monitor pgBackRest (2.32 and above)
    backups from Nagios.

    -s, --service SERVICE
        The Nagios service to run. See section SERVICES for a description of
        available services or use "--list" for a short service and
        description list.

    -S, --stanza NAME
        Name of the stanza to check.

    --repo REPOSITORY
        Repository index to operate on. The "--repo" argument is mandatory
        when multiple repositories are defined.

    -O, --output OUTPUT_FORMAT
        The output format. Supported outputs are: "human", "json", "nagios"
        (default) and "prtg".

    -C, --command FILE
        pgBackRest executable file (default: "pgbackrest").

    -c, --config CONFIGURATION_FILE
        pgBackRest configuration file.

    -P, --prefix COMMAND
        Some prefix command to execute the pgBackRest info command (eg:
        "sudo -iu postgres").

    -l, --list
        List available services.

    --debug
        Print some debug messages.

    -V, --version
        Print version and exit.

    -?, --help
        Show this help page.

  SERVICES
    Descriptions and parameters of available services.

    retention
        Fail when the number of full backups is less than the
        "--retention-full" argument.

        Fail when the newest backup is older than the "--retention-age"
        argument.

        Fail when the newest full backup is older than the
        "--retention-age-to-full" argument.

        The following units are accepted (not case sensitive): s (second), m
        (minute), h (hour), d (day). You can use more than one unit per
        given value.

        Arguments are not mandatory to only show some information.

    archives
        Check if all archived WALs exist between the oldest and the latest
        WAL needed for the recovery.

        Archives must be compressed. If needed, use "compress-level=0"
        instead of "compress=n".

        Use the "--wal-segsize" argument to set the WAL segment size.

        The following units are accepted (not case sensitive): b (Byte), k
        (KB), m (MB), g (GB), t (TB), p (PB), e (EB) or Z (ZB). Only
        integers are accepted. Eg. "1.5MB" will be refused, use "1500kB".

        The factor between units is 1024 bytes. Eg. "1g = 1G =
        1024*1024*1024."

        Use the "--ignore-archived-before" argument to ignore the archived
        WALs generated before the provided interval. Used to only check the
        latest archives.

        Use the "--ignore-archived-after" argument to ignore the archived
        WALs generated after the provided interval.

        The "--latest-archive-age-alert" argument defines the max age of the
        latest archived WAL as an interval before raising a critical alert.

        The following units are accepted as interval (not case sensitive): s
        (second), m (minute), h (hour), d (day). You can use more than one
        unit per given value. If not set, the last unit is in seconds. Eg.
        "1h 55m 6" = "1h55m6s".

        All the missing archives are only shown in the "--debug" mode.

        Use "--list-archives" in addition with "--debug" to print the list
        of all the archived WAL segments.

        By default, all the archives older than the oldest backup start
        archive or newer than the max_wal returned by the pgBackRest info
        command are ignored.

        Use the "--extended-check" argument to force a full check of the
        found archives and raise warnings in case of inconsistencies.

    check_pgb_version
        Check if this script is running a given version.

        You must provide the expected version using "--target-version".

CONTRIBUTING
    check_pgbackrest is an open project. Any contribution to improve it is
    welcome.

VERSION
    check_pgbackrest version 2.0, released on Wed Feb 10 2021.

LICENSING
    This program is open source, licensed under the PostgreSQL license. For
    license terms, see the LICENSE file.

AUTHORS
    Author: Stefan Fercot.

    Logo: Damien Cazeils (www.damiencazeils.com).

    Copyright: (c) 2018-2020, Dalibo / 2020-2021, Stefan Fercot.

